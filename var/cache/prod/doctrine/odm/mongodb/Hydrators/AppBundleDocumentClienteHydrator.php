<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class AppBundleDocumentClienteHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id']) || (! empty($this->class->fieldMappings['id']['nullable']) && array_key_exists('_id', $data))) {
            $value = $data['_id'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['id']['type'];
                $return = $value instanceof \MongoId ? (string) $value : $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['nombre']) || (! empty($this->class->fieldMappings['nombre']['nullable']) && array_key_exists('nombre', $data))) {
            $value = $data['nombre'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['nombre']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['nombre']->setValue($document, $return);
            $hydratedData['nombre'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['apPaterno']) || (! empty($this->class->fieldMappings['apPaterno']['nullable']) && array_key_exists('apPaterno', $data))) {
            $value = $data['apPaterno'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['apPaterno']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['apPaterno']->setValue($document, $return);
            $hydratedData['apPaterno'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['apMaterno']) || (! empty($this->class->fieldMappings['apMaterno']['nullable']) && array_key_exists('apMaterno', $data))) {
            $value = $data['apMaterno'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['apMaterno']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['apMaterno']->setValue($document, $return);
            $hydratedData['apMaterno'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['email']) || (! empty($this->class->fieldMappings['email']['nullable']) && array_key_exists('email', $data))) {
            $value = $data['email'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['email']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['email']->setValue($document, $return);
            $hydratedData['email'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['celular']) || (! empty($this->class->fieldMappings['celular']['nullable']) && array_key_exists('celular', $data))) {
            $value = $data['celular'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['celular']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['celular']->setValue($document, $return);
            $hydratedData['celular'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['sexo']) || (! empty($this->class->fieldMappings['sexo']['nullable']) && array_key_exists('sexo', $data))) {
            $value = $data['sexo'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['sexo']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['sexo']->setValue($document, $return);
            $hydratedData['sexo'] = $return;
        }

        /** @Field(type="integer") */
        if (isset($data['edad']) || (! empty($this->class->fieldMappings['edad']['nullable']) && array_key_exists('edad', $data))) {
            $value = $data['edad'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['edad']['type'];
                $return = (int) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['edad']->setValue($document, $return);
            $hydratedData['edad'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['proyectos']) ? $data['proyectos'] : null;
        $return = $this->dm->getConfiguration()->getPersistentCollectionFactory()->create($this->dm, $this->class->fieldMappings['proyectos']);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['proyectos']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['proyectos']->setValue($document, $return);
        $hydratedData['proyectos'] = $return;
        return $hydratedData;
    }
}